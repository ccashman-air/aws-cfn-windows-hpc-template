{
	"AWSTemplateFormatVersion" : "2010-09-09",
	"Description"              : "This CloudFormation stack creates a Microsoft HPC Pack 2016 R2 Cluster in an existing environment. **WARNING** This template creates two or more Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",
	"Parameters"               : {
		"KeyName" : {
			"Description": "Name of an existing EC2 Key Pair",
			"Type"       : "String",
			"Default"    : ""
		},
		"SnapshotID" : {
			"Description"          : "Snapshot Id of the HPC Installation data",
			"Type"                 : "String",
			"AllowedPattern"       : "((snap-([0-9a-fA-F]{8}))|(snap-([0-9a-fA-F]{17})))",
			"ConstraintDescription": "must be a valid snapshot ID."
		},
		"ClusterSubnetID" : {
			"Description"          : "Subnet Id of the HPC cluster",
			"Type"                 : "String",
			"AllowedPattern"       : "((subnet-([0-9a-fA-F]{8}))|(subnet-([0-9a-fA-F]{17})))",
			"ConstraintDescription": "must be a valid subnet ID."
		},
		"ClusterSecurityGroupID" : {
			"Description"          : "Security Group Id of the HPC cluster",
			"Type"                 : "String",
			"AllowedPattern"       : "((sg-([0-9a-fA-F]{8}))|(sg-([0-9a-fA-F]{17})))",
			"ConstraintDescription": "must be a valid security group ID."
		},
		"DomainDNSName" : {
			"Description"   : "Fully qualified domain name (FQDN) of the forest root domain e.g. corp.example.",
			"Default"       : "awslab.local",
			"Type"          : "String",
			"AllowedPattern": "[a-zA-Z0-9]+\\..*"
		},
		"DomainNetBIOSName" : {
			"Description"   : "NetBIOS name of the domain (upto 15 characters) for users of earlier versions of Windows e.g. CORP",
			"Type"          : "String",
			"MinLength"     : "1",
			"MaxLength"     : "15",
			"Default"       : "AWSLAB",
			"AllowedPattern": "[a-zA-Z0-9]+"
		},
		"HPCUserName" : {
			"Description"   : "Logon Name of the HPC User user created for this installation",
			"Type"          : "String",
			"MinLength"     : "1",
			"MaxLength"     : "255",
			"Default"       : "HPCUser",
			"AllowedPattern": "[a-zA-Z0-9]+"
		},
		"HPCUserPassword" : {
			"Description"   : "Password for the HPC User account. Must be at least 8 characters containing letters, numbers and symbols",
			"Type"          : "String",
			"MinLength"     : "8",
			"MaxLength"     : "32",
			"AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
			"NoEcho"        : "True"
		},
		"AWSAmiId" : {
			"Description"          : "Identifier of the Amazon Machine Image to use for the platforms (all machines are started using the same AMI). We use Microsoft Windows Server 2016 R2 Base 64bits.",
			"Type"                 : "String",
			"AllowedPattern"       : "((ami-([0-9a-fA-F]{8}))|(ami-([0-9a-fA-F]{17})))",
			"ConstraintDescription": "must be a valid Amazon Machine Image (ami-xxxxxxxxxxxxxxxxx or ami-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)."
		},
		"HeadNodeInstanceType" : {
			"Description": "Instance type to use for the Head Node Instance",
			"Type"       : "String",
			"Default"    : "m4.2xlarge"
		},
		"ComputeNodeInstanceType" : {
			"Description": "Instance type to use for the Compute Node Instance",
			"Type"       : "String",
			"Default"    : "c3.8xlarge"
		},
		"ClusterPlacementGroup" : {
			"Description": "Name of an existing placement group for the cluster nodes (no placement group if empty)",
			"Type"       : "String",
			"Default"    : ""
		},
		"ComputeNodeInstanceCount" : {
			"Description": "Number of compute nodes to start initially",
			"Type"       : "Number",
			"MinValue"   : "1",
			"Default"    : "2"
		},
		"ComputeNodeInstanceCountIncrease" : {
			"Description": "Number of compute nodes to start when the first alarm is raised",
			"Type"       : "Number",
			"MinValue"   : "1",
			"Default"    : "2"
		},
		"AlarmThreshold" : {
			"Description": "Target maximum number of cluster compute hours (scale if more)",
			"Type"       : "Number",
			"MinValue"   : "1",
			"Default"    : "2"
		},
		"ComputeNodeInstanceMinCount" : {
			"Description": "Minimum number of compute nodes to start",
			"Type"       : "Number",
			"MinValue"   : "0",
			"Default"    : "0"
		},
		"ComputeNodeInstanceMaxCount" : {
			"Description": "Maximum number of compute nodes to start",
			"Type"       : "Number",
			"MinValue"   : "1",
			"Default"    : "50"
		},
		"CACertificateName" : {
			"Description": "The file name of the CA certificate to use for configuring HPC",
			"Type"       : "String"
		},
		"SSLCertificateName" : {
			"Description": "The file name of the SSL certificate to use for configuring HPC",
			"Type"       : "String"
		},
		"SSLCertificatePassword" : {
			"Description": "Password for the SSL certificate",
			"Type"       : "String",
			"NoEcho"     : "True"
		}
	},
	"Conditions": {
		"KeyNameDefined": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "KeyName" }, "" ] } ] },
		"ClusterPlacementGroupDefined": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ClusterPlacementGroup" }, "" ] } ] }
	},
	"Resources" : {
		"HeadNodeRole": {
			"Type"      : "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version" : "2012-10-17",
					"Statement": [ 
						{ 
							"Effect": "Allow",
							"Principal": { "Service": [ "ec2.amazonaws.com" ] },
							"Action": [ "sts:AssumeRole" ]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName"    : "S3AccessAndPutMetricData",
						"PolicyDocument": {
							"Version"  : "2012-10-17",
							"Statement": [
								{
									"Effect" : "Allow",
									"Action" : ["cloudwatch:PutMetricData"],
									"Resource" : "*"
								},
								{
									"Effect" : "Allow",
									"Action" : ["s3:GetObject"],
									"Resource" : "arn:aws:s3:::<DESTINATION>/*"
								}
							]
						}
					},
					{
						"PolicyName"    : "AmazonEC2RoleForSSM",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
									{
											"Effect": "Allow",
											"Action": [
													"ssm:DescribeAssociation",
													"ssm:GetDeployablePatchSnapshotForInstance",
													"ssm:GetDocument",
													"ssm:DescribeDocument",
													"ssm:GetManifest",
													"ssm:GetParameters",
													"ssm:ListAssociations",
													"ssm:ListInstanceAssociations",
													"ssm:PutInventory",
													"ssm:PutComplianceItems",
													"ssm:PutConfigurePackageResult",
													"ssm:UpdateAssociationStatus",
													"ssm:UpdateInstanceAssociationStatus",
													"ssm:UpdateInstanceInformation"
											],
											"Resource": "*"
									},
									{
											"Effect": "Allow",
											"Action": [
													"ssmmessages:CreateControlChannel",
													"ssmmessages:CreateDataChannel",
													"ssmmessages:OpenControlChannel",
													"ssmmessages:OpenDataChannel"
											],
											"Resource": "*"
									},
									{
											"Effect": "Allow",
											"Action": [
													"ec2messages:AcknowledgeMessage",
													"ec2messages:DeleteMessage",
													"ec2messages:FailMessage",
													"ec2messages:GetEndpoint",
													"ec2messages:GetMessages",
													"ec2messages:SendReply"
											],
											"Resource": "*"
									},
									{
											"Effect": "Allow",
											"Action": [
													"cloudwatch:PutMetricData"
											],
											"Resource": "*"
									},
									{
											"Effect": "Allow",
											"Action": [
													"ec2:DescribeInstanceStatus"
											],
											"Resource": "*"
									},
									{
											"Effect": "Allow",
											"Action": [
													"ds:CreateComputer",
													"ds:DescribeDirectories"
											],
											"Resource": "*"
									},
									{
											"Effect": "Allow",
											"Action": [
													"logs:CreateLogGroup",
													"logs:CreateLogStream",
													"logs:DescribeLogGroups",
													"logs:DescribeLogStreams",
													"logs:PutLogEvents"
											],
											"Resource": "*"
									},
									{
											"Effect": "Allow",
											"Action": [
													"s3:GetBucketLocation",
													"s3:PutObject",
													"s3:GetObject",
													"s3:GetEncryptionConfiguration",
													"s3:AbortMultipartUpload",
													"s3:ListMultipartUploadParts",
													"s3:ListBucket",
													"s3:ListBucketMultipartUploads"
											],
											"Resource": "*"
									}
							]
						}
					}
				]
			}
		},

		"HeadNodeProfile": {
			"Type"      : "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path" : "/",
				"Roles": [ { "Ref": "HeadNodeRole" } ]
			}
		},

		"S3AccessRole": {
			"Type"      : "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version" : "2012-10-17",
					"Statement": [ 
						{ 
							"Effect": "Allow",
							"Principal": { "Service": [ "ec2.amazonaws.com" ] },
							"Action": [ "sts:AssumeRole" ]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName"    : "S3Access",
						"PolicyDocument": {
							"Version"  : "2012-10-17",
							"Statement": [
								{
									"Effect" : "Allow",
									"Action" : ["s3:GetObject"],
									"Resource" : "arn:aws:s3:::<DESTINATION>/*"
								}
							]
						}
					}
				]
			}
		},

		"S3AccessProfile": {
			"Type"      : "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path" : "/",
				"Roles": [ { "Ref": "S3AccessRole" } ]
			}
		},

		"ComputeNodeWaitCondition" : {
			"Type" : "AWS::CloudFormation::WaitCondition",
			"DependsOn" : ["ComputeNodes"],
			"Properties" : {
				"Handle" : {"Ref" : "ComputeNodeWaitHandle"},
				"Timeout" : "7200",
				"Count" : { "Ref": "ComputeNodeInstanceCount" }
			}
		},

		"ComputeNodeWaitHandle" : {
			"Type" : "AWS::CloudFormation::WaitConditionHandle"
		},

		"HeadNodeWaitCondition" : {
			"Type" : "AWS::CloudFormation::WaitCondition",
			"DependsOn" : ["HeadNode"],
			"Properties" : {
				"Handle" : {"Ref" : "HeadNodeWaitHandle"},
				"Timeout" : "7200"
			}
		},

		"HeadNodeWaitHandle" : {
			"Type" : "AWS::CloudFormation::WaitConditionHandle"
		},

		"HeadNodeCloudWatchSSMDocument" : {
			"Type"       : "AWS::SSM::Document",
			"Properties" : {
				"Content" : {
					"schemaVersion": "1.2",
					"description": "Export metrics and log files from your instances to Amazon CloudWatch.",
					"parameters": {
					  "status": {
						"type": "String",
						"default": "Enabled",
						"description": "(Optional) Enable or disable CloudWatch. Valid values: Enabled | Disabled",
						"allowedValues": [
						  "Enabled",
						  "Disabled"
						]
					  },
					  "properties": {
						"type": "String",
						"default": "",
						"description": "(Optional) The configuration for CloudWatch in JSON format. Learn more at https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-plugins.html#aws-cloudWatch",
						"displayType": "textarea"
					  }
					},
					"runtimeConfig": {
					  "aws:cloudWatch": {
						"settings": {
						  "startType": "{{ status }}"
						},
						"properties": "{{ properties }}"
					  }
					}
				  },
				"DocumentType" : "Command"
			}
		},

		"HeadNode": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Authentication": {
					"rolebased" : {
						"type": "S3",
						"buckets": [ "<BUCKETNAME>" ],
						"roleName": { "Ref": "HeadNodeRole" }
					}
				},
				"AWS::CloudFormation::Init": {
					"configSets": {
						"config": [
							"1-setup",
							"2-run"
						]
					},
					"1-setup": {
						"files": {
							"C:\\cfn\\cfn-hup.conf": {
								"source": "<SUBSTACKSOURCE>cfn-init/cfn-hup.conf",
								"authentication" : "rolebased",
								"context" : {
									"StackId": { "Ref" : "AWS::StackId" },
									"Region" : { "Ref" : "AWS::Region" }
								}
							},
							"C:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"source": "<SUBSTACKSOURCE>cfn-init/cfn-auto-reloader.conf",
								"authentication" : "rolebased",
								"context" : {
									"ResourceName" : "HeadNode",
									"StackId": { "Ref" : "AWS::StackId" },
									"Region" : { "Ref" : "AWS::Region" }
								}
							},
			        "C:\\cfn\\install\\hpc-user-info.conf": {
								"source": "<SUBSTACKSOURCE>cfn-init/hpc-user-info.conf",
								"authentication" : "rolebased",
								"context" : {
									"DomainDNSName" : { "Ref" : "DomainDNSName" },
									"DomainNetBIOSName": { "Ref" : "DomainNetBIOSName" },
									"HPCUserName" : { "Ref" : "HPCUserName" },
									"HPCUserPassword": { "Ref" : "HPCUserPassword" },
									"SSLCertificatePassword": { "Ref" : "SSLCertificatePassword" }
								}
							},
							"C:\\cfn\\install\\sql-config.conf" : {
								"source": "<SUBSTACKSOURCE>cfn-init/sql-config.conf",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\rename-computer.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/rename-computer.ps1",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\configure-network-adapter-settings.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-adapter-settings.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\configure-network-dns.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-dns.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\configure-network-drivers.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-drivers.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\configure-network-ip.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-ip.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\configure-network-windows-update.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-windows-update.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\join-domain.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/join-domain.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\add-admin-user.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/add-admin-user.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\initialize-d-drive.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/initialize-d-drive.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\install-process.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/install-process-head.ps1",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\ssl-cert.pfx" : {
								"source": {
									"Fn::Join" : [ "", [ "<SUBSTACKSOURCE>cfn-init/", { "Ref": "SSLCertificateName" }, ".pfx" ] ]
								},
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\ca-cert.cer" : {
								"source": {
									"Fn::Join" : [ "", [ "<SUBSTACKSOURCE>cfn-init/", { "Ref": "CACertificateName" }, ".cer" ] ]
								},
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\install-hpc-pack.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/install-hpc-pack-head.ps1",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\post-install-hpc-pack.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/post-install-hpc-pack-head.ps1",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\compute-metrics.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/compute-metrics.ps1",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\CleanupFiles.cmd" : {
								"content": { 
									"Fn::Join" : ["\n", [
										"DEL c:\\cfn\\install\\hpc-user-info.conf"
									] ]
								}
			                }
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : [ "c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					},
					"2-run": {
						"commands": {
							"01-rename-computer": {
								"command": "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\rename-computer.ps1 -ComputerName head-node",
								"waitAfterCompletion": "forever"
							},
							"02-join-domain": {
								"command": "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\join-domain.ps1 -DomainFile c:\\cfn\\install\\hpc-user-info.conf",
								"waitAfterCompletion": "forever"
							},
							"03-add-user": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\add-admin-user.ps1 -LogonName ", { "Ref": "DomainNetBIOSName" }, "/", { "Ref": "HPCUserName" } ] ] },
								"waitAfterCompletion": "0"
							},
							"04-initialize-d-drive": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\initialize-d-drive.ps1 -DomainNetBIOSName ", { "Ref": "DomainNetBIOSName" } ] ] },
								"waitAfterCompletion": "0"
							},
							"05-configure-network-ip": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-ip.ps1 -InterfaceNewName Enterprise" ] ] },
								"waitAfterCompletion": "5"
							},
							"06-configure-network-dns": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-dns.ps1 -DomainDNSName ", { "Ref": "DomainDNSName" }, " -InterfaceNewName Enterprise" ] ] },
								"waitAfterCompletion": "5"
							},
							"07-install-drivers": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-drivers.ps1" ] ] },
								"waitAfterCompletion": "5"
							},
							"08-configure-network-adapter-settings": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-adapter-settings.ps1 -InterfaceNewName Enterprise" ] ] },
								"waitAfterCompletion": "5"
							},
							"09-configure-network-windows-update": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-windows-update.ps1" ] ] },
								"waitAfterCompletion": "5"
							},
							"10-setup-hpcpack": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\install-process.ps1 -UserFile c:\\cfn\\install\\hpc-user-info.conf -Stack ", { "Ref": "AWS::StackName" }, " -Region ", { "Ref": "AWS::Region" } ] ] },
								"waitAfterCompletion": "0"
							},
							"11-cleanup-files": {
								"command": "C:\\cfn\\install\\CleanupFiles.cmd",
								"waitAfterCompletion": "0"
							},
							"12-signal-success": {
								"command": { "Fn::Join" : ["", [ "cfn-signal.exe -e 0 \"", { "Fn::Base64" : { "Ref" : "HeadNodeWaitHandle" } }, "\"" ] ] },
								"waitAfterCompletion": "0"
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": { "Ref" : "AWSAmiId" },
				"InstanceType": { "Ref": "HeadNodeInstanceType" },
				"IamInstanceProfile": { "Ref": "HeadNodeProfile" },
				"Tags"         : [
					{ "Key" : "Name", "Value" : { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" },  " - Head Node" ] ] } }
				],
				"PlacementGroupName": { "Fn::If": [ "ClusterPlacementGroupDefined", { "Ref": "ClusterPlacementGroup" }, { "Ref" : "AWS::NoValue" } ] },
				"KeyName": { "Fn::If": [ "KeyNameDefined", { "Ref": "KeyName" }, { "Ref" : "AWS::NoValue" } ] },
				"NetworkInterfaces": [
					{ "AssociatePublicIpAddress": "true", "DeviceIndex": 0, "SubnetId": { "Ref" : "ClusterSubnetID" }, "GroupSet": [ { "Ref": "ClusterSecurityGroupID" } ] }
				],
				"BlockDeviceMappings": [
					{ "DeviceName" : "/dev/sda1", "Ebs" : { "VolumeType" : "gp2" } },
					{ "DeviceName" : "xvdf", "Ebs" : { "SnapshotId": { "Ref": "SnapshotID" }, "VolumeSize": 100, "VolumeType" : "gp2", "DeleteOnTermination": true } }
				],
				"UserData": {
					"Fn::Base64": { 
						"Fn::Join": [ "", [
							"<script>\n",
							"cfn-init.exe -v -c config -s ", {"Ref": "AWS::StackId"}, " -r HeadNode ", " --region ", {"Ref": "AWS::Region"}, "\n",
							"</script>"
						] ]
					}
				},
				"SsmAssociations" : [{
					"DocumentName" : { "Ref" : "HeadNodeCloudWatchSSMDocument" },
					"AssociationParameters" : [
						{ "Key" : "status",     "Value" : [ "Enabled" ] },
						{ "Key" : "properties", "Value" : [ "{    \"IsEnabled\": true,    \"EngineConfiguration\": {        \"PollInterval\": \"00:00:15\",         \"Components\": [           {                \"Id\": \"PerformanceCounter-BusyCores\",                \"FullName\": \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",                \"Parameters\": {                    \"CategoryName\": \"HPC Cores\",                    \"CounterName\": \"Number of busy cores\",                    \"InstanceName\": \"\",                    \"MetricName\": \"HpcBusyCores\",                    \"Unit\": \"Count\",                    \"DimensionName\": \"\",                    \"DimensionValue\": \"\"                }            },            {                \"Id\": \"PerformanceCounter-TotalCores\",                \"FullName\": \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",                \"Parameters\": {                    \"CategoryName\": \"HPC Cores\",                    \"CounterName\": \"Total number of cores\",                    \"InstanceName\": \"\",                    \"MetricName\": \"HpcTotalCores\",                    \"Unit\": \"Count\",                    \"DimensionName\": \"\",                    \"DimensionValue\": \"\"                }            },            {                \"Id\": \"PerformanceCounter-QueuedJobs\",                \"FullName\": \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",                \"Parameters\": {                    \"CategoryName\": \"HPC Jobs\",                    \"CounterName\": \"Number of queued jobs\",                    \"InstanceName\": \"\",                    \"MetricName\": \"HpcQueuedJobs\",                    \"Unit\": \"Count\",                    \"DimensionName\": \"\",                    \"DimensionValue\": \"\"                }            },            {                \"Id\": \"CloudWatch\",                \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",                \"Parameters\": {                    \"AccessKey\": \"\",                    \"SecretKey\": \"\",                    \"Region\": \"us-east-1\",                    \"NameSpace\": \"HPC Cluster Metrics\"                }            }         ],         \"Flows\": {            \"Flows\": [              \"(PerformanceCounter-BusyCores, PerformanceCounter-TotalCores, PerformanceCounter-QueuedJobs),CloudWatch\"            ]        }    }}" ] }
					]
				}]
			}
		},

		"ComputeNode": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Authentication": {
					"rolebased" : {
						"type": "S3",
						"buckets": [ "<BUCKETNAME>" ],
						"roleName": { "Ref": "S3AccessRole" }
					}
				},
				"AWS::CloudFormation::Init": {
					"configSets": {
						"config": [
							"1-setup",
							"2-run"
						]
					},
					"1-setup": {
						"files": {
							"C:\\cfn\\cfn-hup.conf": {
								"source": "<SUBSTACKSOURCE>cfn-init/cfn-hup.conf",
								"authentication" : "rolebased",
								"context" : {
									"StackId": { "Ref" : "AWS::StackId" },
									"Region" : { "Ref" : "AWS::Region" }
								}
							},
							"C:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"source": "<SUBSTACKSOURCE>cfn-init/cfn-auto-reloader.conf",
								"authentication" : "rolebased",
								"context" : {
									"ResourceName" : "HeadNode",
									"StackId": { "Ref" : "AWS::StackId" },
									"Region" : { "Ref" : "AWS::Region" }
								}
							},
			                "C:\\cfn\\install\\hpc-user-info.conf": {
								"source": "<SUBSTACKSOURCE>cfn-init/hpc-user-info.conf",
								"authentication" : "rolebased",
								"context" : {
									"DomainDNSName" : { "Ref" : "DomainDNSName" },
									"DomainNetBIOSName": { "Ref" : "DomainNetBIOSName" },
									"HPCUserName" : { "Ref" : "HPCUserName" },
									"HPCUserPassword": { "Ref" : "HPCUserPassword" },
									"SSLCertificatePassword": { "Ref" : "SSLCertificatePassword" }
								}
							},
							"C:\\cfn\\install\\configure-network-adapter-settings.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-adapter-settings.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\configure-network-dns.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-dns.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\configure-network-drivers.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-drivers.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\configure-network-ip.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-ip.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\configure-network-windows-update.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/configure-hpc-network-windows-update.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\join-domain.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/join-domain.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\add-admin-user.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/add-admin-user.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\initialize-d-drive.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/initialize-d-drive.ps1",
								"authentication" : "rolebased"
							},
							"C:\\cfn\\install\\install-process.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/install-process-compute.ps1",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\ssl-cert.pfx" : {
								"source": {
									"Fn::Join" : [ "", [ "<SUBSTACKSOURCE>cfn-init/", { "Ref": "SSLCertificateName" }, ".pfx" ] ]
								},
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\ca-cert.cer" : {
								"source": {
									"Fn::Join" : [ "", [ "<SUBSTACKSOURCE>cfn-init/", { "Ref": "CACertificateName" }, ".cer" ] ]
								},
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\install-hpc-pack.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/install-hpc-pack-compute.ps1",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\post-install-hpc-pack.ps1" : {
								"source": "<SUBSTACKSOURCE>cfn-init/post-install-hpc-pack-compute.ps1",
								"authentication" : "rolebased"
			                },
							"C:\\cfn\\install\\CleanupFiles.cmd" : {
								"content": { 
									"Fn::Join" : ["\n", [
										"DEL c:\\cfn\\install\\hpc-user-info.conf"
									] ]
								}
							}
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : [ "c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					},
					"2-run": {
						"commands": {
							"01-join-domain": {
								"command": "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\join-domain.ps1 -DomainFile c:\\cfn\\install\\hpc-user-info.conf",
								"waitAfterCompletion": "forever"
							},
							"02-add-user": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\add-admin-user.ps1 -LogonName ", { "Ref": "DomainNetBIOSName" }, "/", { "Ref": "HPCUserName" } ] ] },
								"waitAfterCompletion": "0"
							},
							"03-initialize-d-drive": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\initialize-d-drive.ps1 -DomainNetBIOSName ", { "Ref": "DomainNetBIOSName" } ] ] },
								"waitAfterCompletion": "0"
							},
							"04-configure-network-ip": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-ip.ps1 -InterfaceNewName Enterprise" ] ] },
								"waitAfterCompletion": "5"
							},
							"05-configure-network-dns": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-dns.ps1 -DomainDNSName ", { "Ref": "DomainDNSName" }, " -InterfaceNewName Enterprise" ] ] },
								"waitAfterCompletion": "5"
							},
							"06-install-drivers": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-drivers.ps1" ] ] },
								"waitAfterCompletion": "5"
							},
							"07-configure-network-adapter-settings": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-adapter-settings.ps1 -InterfaceNewName Enterprise" ] ] },
								"waitAfterCompletion": "5"
							},
							"08-configure-network-windows-update": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\configure-network-windows-update.ps1" ] ] },
								"waitAfterCompletion": "5"
							},
							"09-setup-hpcpack": {
								"command": { "Fn::Join" : ["", [ "powershell.exe -ExecutionPolicy Unrestricted C:\\cfn\\install\\install-process.ps1 -UserFile c:\\cfn\\install\\hpc-user-info.conf -Stack ", { "Ref": "AWS::StackName" }, " -Region ", { "Ref": "AWS::Region" } ] ] },
								"waitAfterCompletion": "0"
							},
							"10-cleanup-files": {
								"command": "C:\\cfn\\install\\CleanupFiles.cmd",
								"waitAfterCompletion": "0"
							},
							"11-signal-success": {
								"command": { "Fn::Join": ["", [ "cfn-signal.exe -e 0 \"", { "Fn::Base64" : { "Ref" : "ComputeNodeWaitHandle" } },"\"" ] ] },
								"waitAfterCompletion": "0"
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": { "Ref" : "AWSAmiId" },
				"InstanceType": { "Ref": "ComputeNodeInstanceType" },
				"IamInstanceProfile": { "Ref": "S3AccessProfile" },
				"KeyName": { "Fn::If": [ "KeyNameDefined", { "Ref": "KeyName" }, { "Ref" : "AWS::NoValue" } ] },
				"AssociatePublicIpAddress": "true",
				"SecurityGroups": [ { "Ref": "ClusterSecurityGroupID" } ],
				"BlockDeviceMappings": [
					{ "DeviceName" : "/dev/sda1", "Ebs" : { "VolumeType" : "gp2" } },
					{ "DeviceName" : "xvdf", "Ebs" : { "SnapshotId": { "Ref": "SnapshotID" }, "VolumeSize": 100, "VolumeType" : "gp2", "DeleteOnTermination": true } }
				],
				"UserData": {
					"Fn::Base64": { 
						"Fn::Join": [ "", [
							"<script>\n",
							"cfn-init.exe -v -c config -s ", {"Ref": "AWS::StackId"}, " -r ComputeNode ", " --region ", {"Ref": "AWS::Region"}, "\n",
							"</script>"
						] ]
					}
				}
			}
		},

		"ScaleUp": {
			"Type"      : "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType"      : "ChangeInCapacity",
				"AutoScalingGroupName": { "Ref": "ComputeNodes" },
				"Cooldown"            : "60",
				"ScalingAdjustment"   : { "Ref": "ComputeNodeInstanceCountIncrease" }
			}
		},

		"ComputeNodesScaleUp": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription"  : "The current fleet has not enough capacity to handle the computation in less than the number of hours planned, we should scale up",
				"Namespace"         : "HPC Cluster Metrics",
				"MetricName"        : "Global Hours",
				"Dimensions"        : [ { "Name": "StackId", "Value": { "Ref" : "AWS::StackName" } } ],
				"Statistic"         : "Average",
				"Period"            : "60",
				"EvaluationPeriods" : "1",
				"Threshold"         : { "Ref": "AlarmThreshold" },
				"AlarmActions"      : [ { "Ref": "ScaleUp" } ],
				"Unit"              : "Count",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold"
			}
		},



		"ComputeNodes": {
			"DependsOn": ["HeadNodeWaitCondition"],
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"LaunchConfigurationName": { "Ref": "ComputeNode" },
				"VPCZoneIdentifier": [ { "Ref" : "ClusterSubnetID" } ],
				"PlacementGroup": { "Fn::If": [ "ClusterPlacementGroupDefined", { "Ref": "ClusterPlacementGroup" }, { "Ref" : "AWS::NoValue" } ] },
				"Tags"         : [
					{ "Key" : "Name", "Value" : { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" },  " - Compute Node" ] ] }, "PropagateAtLaunch": "true" }
				],
				"MinSize": { "Ref": "ComputeNodeInstanceMinCount" },
				"MaxSize": { "Ref": "ComputeNodeInstanceMaxCount" },
				"DesiredCapacity": { "Ref": "ComputeNodeInstanceCount" },
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "300",
				"Cooldown": "300"
			}
		}
	}
}